/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.jfaster.mango.parser;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 21;
            return 4;
         }
         if ((active0 & 0x1f0000L) != 0L)
         {
            jjmatchedKind = 21;
            return 32;
         }
         if ((active0 & 0x7a00L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
            return 41;
         }
         if ((active0 & 0x1f0000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
            return 32;
         }
         return -1;
      case 3:
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
            return 32;
         }
         return -1;
      case 4:
         if ((active0 & 0xf8000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0x100000L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x78000L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x7a00L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1d7000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 70:
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x53000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 68:
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x58000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 32);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 32);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 32);
         break;
      case 70:
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfbffff76ffffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 58)
                     jjAddStates(0, 1);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  else if (curChar == 32)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(0);
                  }
                  break;
               case 4:
               case 32:
                  if ((0xfbffff76ffffffffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  break;
               case 41:
                  if ((0xfbffff76ffffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(5, 6);
                  if (curChar == 40)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 0:
                  if (curChar != 32)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 58)
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 11:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 14:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 41 && kind > 8)
                     kind = 8;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 20:
                  if (curChar == 32)
                     jjAddStates(16, 17);
                  break;
               case 21:
                  if (curChar == 58)
                     jjAddStates(18, 19);
                  break;
               case 22:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 24:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 27:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 31:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 33:
                  if (curChar == 58)
                     jjAddStates(0, 1);
                  break;
               case 34:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(36, 38);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(40, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 41:
               case 32:
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  break;
               case 2:
                  jjAddStates(34, 35);
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 18:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 19:
                  if (curChar == 123)
                     jjAddStates(16, 17);
                  break;
               case 25:
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 28:
                  if (curChar == 125 && kind > 10)
                     kind = 10;
                  break;
               case 29:
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 37:
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(36, 38);
                  break;
               case 39:
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(40, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 32:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  break;
               case 41:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(32);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(34, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000L) != 0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x1800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 34);
         break;
      case 76:
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(4, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 45;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 58)
                     jjAddStates(36, 37);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 45)
                     jjCheckNAdd(23);
                  else if (curChar == 33)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 0:
                  if (curChar == 38 && kind > 23)
                     kind = 23;
                  break;
               case 9:
                  if (curChar == 60 && kind > 25)
                     kind = 25;
                  break;
               case 10:
                  if (curChar == 61 && kind > 26)
                     kind = 26;
                  break;
               case 11:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 13:
                  if (curChar == 61 && kind > 28)
                     kind = 28;
                  break;
               case 14:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 61 && kind > 29)
                     kind = 29;
                  break;
               case 16:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 30)
                     kind = 30;
                  break;
               case 20:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 33 && kind > 31)
                     kind = 31;
                  break;
               case 22:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 39 && kind > 33)
                     kind = 33;
                  break;
               case 27:
                  if (curChar == 58)
                     jjAddStates(36, 37);
                  break;
               case 28:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(30, 32);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(34, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(38, 39);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(40, 41);
                  else if ((0x100000001000L & l) != 0L)
                     jjAddStates(42, 43);
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 42:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 2:
                  if ((0x1000000010L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 3:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 124 && kind > 24)
                     kind = 24;
                  break;
               case 6:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x4000000040000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 8:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 17:
                  if ((0x2000000020000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  jjAddStates(44, 45);
                  break;
               case 31:
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(30, 32);
                  break;
               case 33:
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(34, 30);
                  break;
               case 35:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 38:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 39:
                  if ((0x10000000100000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 41:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 43:
                  if ((0x10000000100000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 44:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 45 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   34, 39, 9, 16, 10, 11, 14, 15, 11, 13, 14, 15, 17, 11, 14, 15, 
   20, 21, 22, 29, 23, 24, 27, 28, 24, 26, 27, 28, 30, 24, 27, 28, 
   5, 6, 2, 3, 28, 33, 42, 44, 39, 40, 36, 37, 25, 26, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\50", "\51", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "EXPRESSION",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffbfffc1L, 
};
static final long[] jjtoSkip = {
   0x400000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[45];
private final int[] jjstateSet = new int[90];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 45; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                SwitchTo(EXPRESSION);
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        SwitchTo(EXPRESSION);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                         SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
